version: '3.8'

services:
  orders:
    build:
      context: .
      # This Dockerfile is create inside orders aplication
      dockerfile: ./apps/orders/Dockerfile
      target: development
    command: npm run start:dev orders
    env_file:
      - ./apps/orders/.env
    depends_on:
      - mongosetup
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    # Map the port 3000 of the docker container to 3000 in the Machine
    ports:
      - '3000:3000'
    # This is the general network to all services
    networks:
      - mynetwork

  billing:
    build:
      context: .
      # This Dockerfile is create inside billing aplication
      dockerfile: ./apps/billing/Dockerfile
      target: development
    command: npm run start:dev billing
    env_file:
      - ./apps/billing/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    # This is the general network to all services
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq
    ports:
      # Map the port 5672 of the docker container to 5672 in the Machine
      - '5672:5672'
    # This is the general network to all services
    networks:
      - mynetwork

  mongodb-primary:
    hostname: mongodb-primary
    container_name: mongodb-primary
    image: mongo:4.4.18
    platform: linux/amd64
    restart: always
    volumes:
      - mongo1_data:/data/db
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    ports:
      - '27017:27017'
    # This is the general network to all services
    networks:
      - mynetwork
    entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'rs0']

  mongodb-secondary:
    hostname: mongodb-secondary
    container_name: mongodb-secondary
    image: mongo:4.4.18
    platform: linux/amd64
    restart: always
    volumes:
      - mongo2_data:/data/db
    # This is the general network to all services
    networks:
      - mynetwork
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'rs0']

  mongodb-arbiter:
    hostname: mongodb-arbiter
    container_name: mongodb-arbiter
    image: mongo:4.4.18
    platform: linux/amd64
    restart: always
    volumes:
      - mongo3_data:/data/db
    # This is the general network to all services
    networks:
      - mynetwork
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'rs0']

  mongosetup:
    image: mongo
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
    volumes:
      - .:/scripts
    restart: 'no'
    # This is the general network to all services
    networks:
      - mynetwork
    entrypoint: ['bash', '/scripts/mongo_setup.sh']

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:

# This is set the network to all services
networks:
  mynetwork:
